// <auto-generated />
using System;
using ICSLib.Authen.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ICSLib.Authen.Data.Migrations
{
    [DbContext(typeof(AuthenDbContext))]
    [Migration("20211221154350_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ICSLib.Authen.Data.Entities.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GenderDesc")
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("GenderName")
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("GenderId");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            GenderId = 1,
                            GenderDesc = "Nam",
                            GenderName = "Male"
                        },
                        new
                        {
                            GenderId = 2,
                            GenderDesc = "Nữ",
                            GenderName = "Female"
                        });
                });

            modelBuilder.Entity("ICSLib.Authen.Data.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Controler")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte>("IsShow")
                        .HasColumnType("tinyint");

                    b.Property<byte>("LevelId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("ParentRoleId")
                        .HasColumnType("int");

                    b.Property<short>("SortOrder")
                        .HasColumnType("smallint");

                    b.Property<byte>("StatusId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Action = "",
                            ConcurrencyStamp = "02b84634-00b4-4b4e-b2e3-907b30c11f14",
                            Controler = "",
                            Description = "Hệ thống",
                            Icon = "",
                            IsShow = (byte)1,
                            LevelId = (byte)1,
                            Name = "System",
                            NormalizedName = "System",
                            ParentRoleId = 0,
                            SortOrder = (short)1,
                            StatusId = (byte)1
                        },
                        new
                        {
                            Id = 2,
                            Action = "",
                            ConcurrencyStamp = "15ff1c59-dfbc-4efb-bf17-b0c29e4f4025",
                            Controler = "",
                            Description = "Phân quyền",
                            Icon = "",
                            IsShow = (byte)1,
                            LevelId = (byte)2,
                            Name = "Authorization",
                            NormalizedName = "Authorization",
                            ParentRoleId = 1,
                            SortOrder = (short)1,
                            StatusId = (byte)1
                        },
                        new
                        {
                            Id = 3,
                            Action = "Index",
                            ConcurrencyStamp = "a10e20d8-ac58-4d9b-b14b-68c15c92bd10",
                            Controler = "RoleGroup",
                            Description = "Quyền hệ thống",
                            Icon = "",
                            IsShow = (byte)1,
                            LevelId = (byte)3,
                            Name = "RoleGroup-Index",
                            NormalizedName = "RoleGroup-Index",
                            ParentRoleId = 2,
                            SortOrder = (short)1,
                            StatusId = (byte)1
                        },
                        new
                        {
                            Id = 4,
                            Action = "Create",
                            ConcurrencyStamp = "94b2d05d-3b44-4d75-b518-f29884a9739f",
                            Controler = "RoleGroup",
                            Description = "Thêm quyền",
                            Icon = "",
                            IsShow = (byte)0,
                            LevelId = (byte)4,
                            Name = "RoleGroup-Create",
                            NormalizedName = "RoleGroup-Create",
                            ParentRoleId = 3,
                            SortOrder = (short)1,
                            StatusId = (byte)1
                        },
                        new
                        {
                            Id = 5,
                            Action = "Edit",
                            ConcurrencyStamp = "0a5960f1-2ca5-47f0-be77-212ea5e69c2a",
                            Controler = "RoleGroup",
                            Description = "Cập nhật quyền",
                            Icon = "",
                            IsShow = (byte)0,
                            LevelId = (byte)4,
                            Name = "RoleGroup-Edit",
                            NormalizedName = "RoleGroup-Edit",
                            ParentRoleId = 3,
                            SortOrder = (short)2,
                            StatusId = (byte)1
                        },
                        new
                        {
                            Id = 6,
                            Action = "Delete",
                            ConcurrencyStamp = "c858e843-cded-40c3-ac8c-96f4352b4654",
                            Controler = "RoleGroup",
                            Description = "Xóa quyền",
                            Icon = "",
                            IsShow = (byte)0,
                            LevelId = (byte)4,
                            Name = "RoleGroup-Delete",
                            NormalizedName = "RoleGroup-Delete",
                            ParentRoleId = 3,
                            SortOrder = (short)3,
                            StatusId = (byte)1
                        },
                        new
                        {
                            Id = 7,
                            Action = "Details",
                            ConcurrencyStamp = "8295216d-fc3e-4244-8a8e-94067843b032",
                            Controler = "RoleGroup",
                            Description = "Thông tin quyền",
                            Icon = "",
                            IsShow = (byte)0,
                            LevelId = (byte)4,
                            Name = "RoleGroup-Details",
                            NormalizedName = "RoleGroup-Details",
                            ParentRoleId = 3,
                            SortOrder = (short)4,
                            StatusId = (byte)1
                        },
                        new
                        {
                            Id = 8,
                            Action = "AssignRole",
                            ConcurrencyStamp = "d21de80a-bf57-4801-aa83-bf654a15eadb",
                            Controler = "RoleGroup",
                            Description = "Cập nhật chức năng cho quyền",
                            Icon = "",
                            IsShow = (byte)0,
                            LevelId = (byte)4,
                            Name = "RoleGroup-AssignRole",
                            NormalizedName = "RoleGroup-AssignRole",
                            ParentRoleId = 3,
                            SortOrder = (short)5,
                            StatusId = (byte)1
                        },
                        new
                        {
                            Id = 9,
                            Action = "Index",
                            ConcurrencyStamp = "aa198f56-218e-47f2-9676-eae5a60f67b7",
                            Controler = "Role",
                            Description = "Chức năng",
                            Icon = "",
                            IsShow = (byte)1,
                            LevelId = (byte)3,
                            Name = "Role-Index",
                            NormalizedName = "Role-Index",
                            ParentRoleId = 2,
                            SortOrder = (short)2,
                            StatusId = (byte)1
                        },
                        new
                        {
                            Id = 10,
                            Action = "Create",
                            ConcurrencyStamp = "604728b2-7a5e-4ec7-9fcb-9a4e67abf068",
                            Controler = "Role",
                            Description = "Thêm Chức năng",
                            Icon = "",
                            IsShow = (byte)0,
                            LevelId = (byte)4,
                            Name = "Role-Create",
                            NormalizedName = "Role-Create",
                            ParentRoleId = 9,
                            SortOrder = (short)1,
                            StatusId = (byte)1
                        },
                        new
                        {
                            Id = 11,
                            Action = "Edit",
                            ConcurrencyStamp = "54f24523-fb5e-4351-aba4-4029c8cce114",
                            Controler = "Role",
                            Description = "Cập nhật Chức năng",
                            Icon = "",
                            IsShow = (byte)0,
                            LevelId = (byte)4,
                            Name = "Role-Edit",
                            NormalizedName = "Role-Edit",
                            ParentRoleId = 9,
                            SortOrder = (short)2,
                            StatusId = (byte)1
                        },
                        new
                        {
                            Id = 12,
                            Action = "Delete",
                            ConcurrencyStamp = "be0b7196-6b6e-4bf1-bb2d-9c7c76422100",
                            Controler = "Role",
                            Description = "Xóa Chức năng",
                            Icon = "",
                            IsShow = (byte)0,
                            LevelId = (byte)4,
                            Name = "Role-Delete",
                            NormalizedName = "Role-Delete",
                            ParentRoleId = 9,
                            SortOrder = (short)3,
                            StatusId = (byte)1
                        },
                        new
                        {
                            Id = 13,
                            Action = "Details",
                            ConcurrencyStamp = "350905ce-0e04-42c0-b51e-b71e3076942e",
                            Controler = "Role",
                            Description = "Thông tin Chức năng",
                            Icon = "",
                            IsShow = (byte)0,
                            LevelId = (byte)4,
                            Name = "Role-Details",
                            NormalizedName = "Role-Details",
                            ParentRoleId = 9,
                            SortOrder = (short)4,
                            StatusId = (byte)1
                        },
                        new
                        {
                            Id = 14,
                            Action = "Index",
                            ConcurrencyStamp = "cb5ef774-95f8-40b2-bc3f-b7e9a45601e5",
                            Controler = "User",
                            Description = "Người dùng",
                            Icon = "",
                            IsShow = (byte)1,
                            LevelId = (byte)3,
                            Name = "User-Index",
                            NormalizedName = "User-Index",
                            ParentRoleId = 2,
                            SortOrder = (short)3,
                            StatusId = (byte)1
                        },
                        new
                        {
                            Id = 15,
                            Action = "Create",
                            ConcurrencyStamp = "695ef50b-4793-4368-afe5-9fa06fe5bc9f",
                            Controler = "User",
                            Description = "Thêm người dùng",
                            Icon = "",
                            IsShow = (byte)0,
                            LevelId = (byte)4,
                            Name = "User-Create",
                            NormalizedName = "User-Create",
                            ParentRoleId = 14,
                            SortOrder = (short)1,
                            StatusId = (byte)1
                        },
                        new
                        {
                            Id = 16,
                            Action = "Edit",
                            ConcurrencyStamp = "ae386ee8-e01a-45cf-b72e-6ee7015d1611",
                            Controler = "User",
                            Description = "Cập nhật người dùng",
                            Icon = "",
                            IsShow = (byte)0,
                            LevelId = (byte)4,
                            Name = "User-Edit",
                            NormalizedName = "User-Edit",
                            ParentRoleId = 14,
                            SortOrder = (short)2,
                            StatusId = (byte)1
                        },
                        new
                        {
                            Id = 17,
                            Action = "Delete",
                            ConcurrencyStamp = "bea16a48-a2fe-4ef8-a014-cf5f600d7506",
                            Controler = "User",
                            Description = "Xóa người dùng",
                            Icon = "",
                            IsShow = (byte)0,
                            LevelId = (byte)4,
                            Name = "User-Delete",
                            NormalizedName = "User-Delete",
                            ParentRoleId = 14,
                            SortOrder = (short)3,
                            StatusId = (byte)1
                        },
                        new
                        {
                            Id = 18,
                            Action = "Details",
                            ConcurrencyStamp = "992aed14-c2c9-4ad9-a498-236fc7d27bcc",
                            Controler = "User",
                            Description = "Thông tin người dùng",
                            Icon = "",
                            IsShow = (byte)0,
                            LevelId = (byte)4,
                            Name = "User-Details",
                            NormalizedName = "User-Details",
                            ParentRoleId = 14,
                            SortOrder = (short)4,
                            StatusId = (byte)1
                        },
                        new
                        {
                            Id = 19,
                            Action = "AssignRoleGroup",
                            ConcurrencyStamp = "b7c64738-3bc0-447c-a806-649b0b8209a6",
                            Controler = "User",
                            Description = "Cấp quyền cho người dùng",
                            Icon = "",
                            IsShow = (byte)0,
                            LevelId = (byte)4,
                            Name = "User-AssignRoleGroup",
                            NormalizedName = "User-AssignRoleGroup",
                            ParentRoleId = 14,
                            SortOrder = (short)5,
                            StatusId = (byte)1
                        },
                        new
                        {
                            Id = 20,
                            Action = "AssignRoleGroup",
                            ConcurrencyStamp = "81559d37-e8ac-494e-801c-b0c1e2a615dc",
                            Controler = "User",
                            Description = "Cấp chức năng cho người dùng",
                            Icon = "",
                            IsShow = (byte)0,
                            LevelId = (byte)4,
                            Name = "User-AssignRole",
                            NormalizedName = "User-AssignRole",
                            ParentRoleId = 14,
                            SortOrder = (short)6,
                            StatusId = (byte)1
                        });
                });

            modelBuilder.Entity("ICSLib.Authen.Data.Entities.RoleGroup", b =>
                {
                    b.Property<int>("RoleGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleGroupDesc")
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("RoleGroupName")
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<byte>("StatusId")
                        .HasColumnType("tinyint");

                    b.HasKey("RoleGroupId");

                    b.ToTable("RoleGroups");

                    b.HasData(
                        new
                        {
                            RoleGroupId = 1,
                            RoleGroupDesc = "Quản trị hệ thống",
                            RoleGroupName = "System administrator",
                            SortOrder = 1,
                            StatusId = (byte)1
                        });
                });

            modelBuilder.Entity("ICSLib.Authen.Data.Entities.RoleGroupRole", b =>
                {
                    b.Property<int>("RoleGroupId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("RoleGroupId", "RoleId");

                    b.ToTable("RoleGroupRoles");

                    b.HasData(
                        new
                        {
                            RoleGroupId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            RoleGroupId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            RoleGroupId = 1,
                            RoleId = 3
                        },
                        new
                        {
                            RoleGroupId = 1,
                            RoleId = 4
                        },
                        new
                        {
                            RoleGroupId = 1,
                            RoleId = 5
                        },
                        new
                        {
                            RoleGroupId = 1,
                            RoleId = 6
                        },
                        new
                        {
                            RoleGroupId = 1,
                            RoleId = 7
                        },
                        new
                        {
                            RoleGroupId = 1,
                            RoleId = 8
                        },
                        new
                        {
                            RoleGroupId = 1,
                            RoleId = 9
                        },
                        new
                        {
                            RoleGroupId = 1,
                            RoleId = 10
                        },
                        new
                        {
                            RoleGroupId = 1,
                            RoleId = 11
                        },
                        new
                        {
                            RoleGroupId = 1,
                            RoleId = 12
                        },
                        new
                        {
                            RoleGroupId = 1,
                            RoleId = 13
                        },
                        new
                        {
                            RoleGroupId = 1,
                            RoleId = 14
                        },
                        new
                        {
                            RoleGroupId = 1,
                            RoleId = 15
                        },
                        new
                        {
                            RoleGroupId = 1,
                            RoleId = 16
                        },
                        new
                        {
                            RoleGroupId = 1,
                            RoleId = 17
                        },
                        new
                        {
                            RoleGroupId = 1,
                            RoleId = 18
                        },
                        new
                        {
                            RoleGroupId = 1,
                            RoleId = 19
                        },
                        new
                        {
                            RoleGroupId = 1,
                            RoleId = 20
                        });
                });

            modelBuilder.Entity("ICSLib.Authen.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActiveDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Comments")
                        .HasMaxLength(2000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CrDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 12, 21, 22, 43, 49, 41, DateTimeKind.Local).AddTicks(9348));

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("OAuthId")
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("OAuthName")
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)");

                    b.Property<byte>("UserStatusId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ActiveDateTime = new DateTime(2021, 12, 21, 22, 43, 49, 93, DateTimeKind.Local).AddTicks(5353),
                            Address = "Hà Nội",
                            Avatar = "",
                            Comments = "",
                            ConcurrencyStamp = "e1c47bf0-f8b0-473e-a3ef-50014b7b72f2",
                            CrDateTime = new DateTime(2021, 12, 21, 22, 43, 49, 93, DateTimeKind.Local).AddTicks(4755),
                            DateOfBirth = new DateTime(1988, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "thew0102@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Thế",
                            FullName = "Vũ Văn Thế",
                            GenderId = 1,
                            LastName = "Vũ Văn",
                            LockoutEnabled = false,
                            NormalizedEmail = "thew0102@gmail.com",
                            NormalizedUserName = "admin",
                            OAuthId = "",
                            OAuthName = "",
                            PasswordHash = "AQAAAAEAACcQAAAAEGA0LlwZfwrZxQkqUcbx9DJcCBXUUfPiKeoIfGyN6dpXXKpqzfn6N4Oy3Wy8khxOMA==",
                            PhoneNumber = "0973214793",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            UserStatusId = (byte)1
                        });
                });

            modelBuilder.Entity("ICSLib.Authen.Data.Entities.UserLog", b =>
                {
                    b.Property<int>("UserLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionCode")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ActionDesc")
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("CrDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GuidTargetObjectId")
                        .HasColumnType("int");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NewData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldeData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TargetObjectId")
                        .HasColumnType("int");

                    b.Property<string>("UserFullName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("UserLogId");

                    b.ToTable("UserLogs");
                });

            modelBuilder.Entity("ICSLib.Authen.Data.Entities.UserRoleGroup", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleGoupId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleGoupId");

                    b.ToTable("UserRoleGoups");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleGoupId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 5
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 6
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 7
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 8
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 9
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 10
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 11
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 12
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 13
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 14
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 15
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 16
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 17
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 18
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 19
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 20
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Value")
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("ICSLib.Authen.Data.Entities.User", b =>
                {
                    b.HasOne("ICSLib.Authen.Data.Entities.Gender", "Gender")
                        .WithMany("AppUsers")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("ICSLib.Authen.Data.Entities.Gender", b =>
                {
                    b.Navigation("AppUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
